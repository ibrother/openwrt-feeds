name: CI

on: [push]

jobs:
  build-mt7621:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: build packages
      run: |
        cd $HOME
        sudo apt-get update
        sudo apt-get install -y \
        build-essential \
        curl \
        file \
        gawk \
        gettext \
        git \
        libncurses5-dev \
        libssl-dev \
        python2.7 \
        python3 \
        rsync \
        subversion \
        sudo \
        swig \
        unzip \
        wget \
        zlib1g-dev
        wget -c https://downloads.openwrt.org/releases/19.07.4/targets/ramips/mt7621/openwrt-sdk-19.07.4-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz
        tar xf openwrt-sdk-19.07.4-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz
        cd openwrt-sdk-19.07.4-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64
        echo $USIGN_SECRET | base64 -d > key-build
        echo "src-link taoluyun $GITHUB_WORKSPACE" >> feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a -p taoluyun
        make defconfig
        make -j1
      env:
        USIGN_SECRET: ${{ secrets.USIGN_SECRET }}
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: packages-mt7621
        path: /home/runner/openwrt-sdk-19.07.4-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64/bin/packages/mipsel_24kc/taoluyun

  build-mvebu-cortexa53:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: build packages
      run: |
        cd $HOME
        sudo apt-get update
        sudo apt-get install -y \
        build-essential \
        curl \
        file \
        gawk \
        gettext \
        git \
        libncurses5-dev \
        libssl-dev \
        python2.7 \
        python3 \
        rsync \
        subversion \
        sudo \
        swig \
        unzip \
        wget \
        zlib1g-dev
        wget -c https://downloads.openwrt.org/snapshots/targets/mvebu/cortexa53/openwrt-sdk-mvebu-cortexa53_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        tar xf openwrt-sdk-mvebu-cortexa53_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        cd openwrt-sdk-mvebu-cortexa53_gcc-8.4.0_musl.Linux-x86_64
        echo $USIGN_SECRET | base64 -d > key-build
        echo "src-link taoluyun $GITHUB_WORKSPACE" >> feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a -p taoluyun
        sed -i "s|package/libs/libcxx|feeds/base/package/libs/libcxx|g" feeds/base/package/libs/libcxxabi/Makefile
        make defconfig
        make -j1
      env:
        USIGN_SECRET: ${{ secrets.USIGN_SECRET }}
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: packages-mvebu-cortexa53
        path: /home/runner/openwrt-sdk-mvebu-cortexa53_gcc-8.4.0_musl.Linux-x86_64/bin/packages/aarch64_cortex-a53/taoluyun

  build-rockchip-armv8:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: build packages
      run: |
        cd $HOME
        sudo apt-get update
        sudo apt-get install -y \
        build-essential \
        curl \
        file \
        gawk \
        gettext \
        git \
        libncurses5-dev \
        libssl-dev \
        python2.7 \
        python3 \
        rsync \
        subversion \
        sudo \
        swig \
        unzip \
        wget \
        zlib1g-dev
        wget -c https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/openwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        tar xf openwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        cd openwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64
        echo $USIGN_SECRET | base64 -d > key-build
        echo "src-link taoluyun $GITHUB_WORKSPACE" >> feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a -p taoluyun
        sed -i "s|package/libs/libcxx|feeds/base/package/libs/libcxx|g" feeds/base/package/libs/libcxxabi/Makefile
        make defconfig
        make -j1
      env:
        USIGN_SECRET: ${{ secrets.USIGN_SECRET }}
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: packages-rockchip-armv8
        path: /home/runner/openwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64/bin/packages/aarch64_generic/taoluyun

  repack-mt7621:
    needs: build-mt7621
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: packages-mt7621
    - name: build packages
      run: |
        cd $HOME
        sudo apt-get update
        sudo apt-get install -y \
        build-essential \
        curl \
        file \
        gawk \
        gettext \
        git \
        libncurses5-dev \
        libssl-dev \
        python2.7 \
        python3 \
        rsync \
        subversion \
        sudo \
        swig \
        unzip \
        wget \
        zlib1g-dev
        wget -c https://downloads.openwrt.org/releases/19.07.4/targets/ramips/mt7621/openwrt-imagebuilder-19.07.4-ramips-mt7621.Linux-x86_64.tar.xz
        tar xf openwrt-imagebuilder-19.07.4-ramips-mt7621.Linux-x86_64.tar.xz
        cd openwrt-imagebuilder-19.07.4-ramips-mt7621.Linux-x86_64
        sed "3a src taoluyun file://$GITHUB_WORKSPACE/packages-mt7621" -i repositories.conf
        mkdir -p files/etc/dnsmasq.d
        curl -sLf https://github.com/cokebar/gfwlist2dnsmasq/raw/master/gfwlist2dnsmasq.sh | bash -s -- -p 5300 -s ss_spec_dst_fw --extra-domain-file $GITHUB_WORKSPACE/extra-domain-list.txt -o ./files/etc/dnsmasq.d/dnsmasq_gfwlist_ipset.conf
        make image PROFILE="mikrotik_rb750gr3" PACKAGES="ariang-nginx block-mount dnsmasq-full dosfstools https-dns-proxy ipset iptables-mod-tproxy kmod-fs-ext4 kmod-fs-vfat kmod-tcp-bbr kmod-usb-storage luci-app-aria2 luci-app-dns-forwarder luci-app-hd-idle luci-app-minidlna luci-app-shadowsocks luci-app-sqm luci-app-upnp luci-nginx shadowsocks-libev -dnsmasq -luci -luci-app-opkg -uhttpd" FILES=files/
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: firmware-mt7621
        path: /home/runner/openwrt-imagebuilder-19.07.4-ramips-mt7621.Linux-x86_64/bin/targets/ramips/mt7621

  repack-mvebu-cortexa53:
    needs: build-mvebu-cortexa53
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: packages-mvebu-cortexa53
    - name: build packages
      run: |
        cd $HOME
        sudo apt-get update
        sudo apt-get install -y \
        build-essential \
        curl \
        file \
        gawk \
        gettext \
        git \
        libncurses5-dev \
        libssl-dev \
        python2.7 \
        python3 \
        rsync \
        subversion \
        sudo \
        swig \
        unzip \
        wget \
        zlib1g-dev
        wget -c https://downloads.openwrt.org/snapshots/targets/mvebu/cortexa53/openwrt-imagebuilder-mvebu-cortexa53.Linux-x86_64.tar.xz
        tar xf openwrt-imagebuilder-mvebu-cortexa53.Linux-x86_64.tar.xz
        cd openwrt-imagebuilder-mvebu-cortexa53.Linux-x86_64
        sed "3a src taoluyun file://$GITHUB_WORKSPACE/packages-mvebu-cortexa53" -i repositories.conf
        mkdir -p files/etc/dnsmasq.d
        curl -sLf https://github.com/cokebar/gfwlist2dnsmasq/raw/master/gfwlist2dnsmasq.sh | bash -s -- -p 5300 -s ss_spec_dst_fw --extra-domain-file $GITHUB_WORKSPACE/extra-domain-list.txt -o ./files/etc/dnsmasq.d/dnsmasq_gfwlist_ipset.conf
        make image PROFILE="glinet_gl-mv1000" PACKAGES="ariang-nginx block-mount dnsmasq-full dosfstools https-dns-proxy ipset iptables-mod-tproxy kmod-fs-ext4 kmod-fs-vfat kmod-tcp-bbr kmod-usb-storage luci-app-aria2 luci-app-dns-forwarder luci-app-frpc luci-app-hd-idle luci-app-minidlna luci-app-shadowsocks luci-app-sqm luci-app-upnp luci-nginx shadowsocks-libev -dnsmasq -luci -luci-app-opkg -uhttpd" FILES=files/
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: firmware-mvebu-cortexa53
        path: /home/runner/openwrt-imagebuilder-mvebu-cortexa53.Linux-x86_64/bin/targets/mvebu/cortexa53

  repack-rockchip-armv8:
    needs: build-rockchip-armv8
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: packages-rockchip-armv8
    - name: build packages
      run: |
        cd $HOME
        sudo apt-get update
        sudo apt-get install -y \
        build-essential \
        curl \
        file \
        gawk \
        gettext \
        git \
        libncurses5-dev \
        libssl-dev \
        python2.7 \
        python3 \
        rsync \
        subversion \
        sudo \
        swig \
        unzip \
        wget \
        zlib1g-dev
        wget -c https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/openwrt-imagebuilder-rockchip-armv8.Linux-x86_64.tar.xz
        tar xf openwrt-imagebuilder-rockchip-armv8.Linux-x86_64.tar.xz
        cd openwrt-imagebuilder-rockchip-armv8.Linux-x86_64
        sed "3a src taoluyun file://$GITHUB_WORKSPACE/packages-rockchip-armv8" -i repositories.conf
        mkdir -p files/etc/dnsmasq.d
        curl -sLf https://github.com/cokebar/gfwlist2dnsmasq/raw/master/gfwlist2dnsmasq.sh | bash -s -- -p 5300 -s ss_spec_dst_fw --extra-domain-file $GITHUB_WORKSPACE/extra-domain-list.txt -o ./files/etc/dnsmasq.d/dnsmasq_gfwlist_ipset.conf
        make image PROFILE="friendlyarm_nanopi-r2s" PACKAGES="ariang-nginx block-mount dnsmasq-full dosfstools https-dns-proxy ipset iptables-mod-tproxy kmod-fs-ext4 kmod-fs-vfat kmod-tcp-bbr kmod-usb-storage luci-app-aria2 luci-app-dns-forwarder luci-app-frpc luci-app-hd-idle luci-app-minidlna luci-app-shadowsocks luci-app-sqm luci-app-upnp luci-nginx shadowsocks-libev -dnsmasq -luci -luci-app-opkg -uhttpd" FILES=files/
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: firmware-rockchip-armv8
        path: /home/runner/openwrt-imagebuilder-rockchip-armv8.Linux-x86_64/bin/targets/rockchip/armv8
